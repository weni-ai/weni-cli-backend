import json
from weni.context import Context
from skill.{module} import {class_name}

def lambda_handler(event, context):
    actionGroup = event.get('actionGroup')
    function = event.get('function')
    parameters = event.get('parameters', [])
    session_attributes = event.get('sessionAttributes')

    credentials = {}
    try:
        credentials = json.loads(session_attributes.get('credentials'))
    except:
        credentials = {}

    globals = {}
    try:
        globals = json.loads(session_attributes.get('globals'))
    except:
        globals = {}

    parameters_map = {}
    for param in parameters:
        parameters_map[param["name"]] = param["value"]
            
    context: Context = Context(credentials=credentials, parameters=parameters_map, globals=globals)
    result, format = {class_name}(context)

    responseBody = {
        "TEXT": {
            "body": json.dumps(result)
        }
    }

    action_response = {
        'actionGroup': actionGroup,
        'function': function,
        'functionResponse': {
            'responseBody': responseBody
        },
        'promptSessionAttributes': {
            'alwaysFormat': f"<example>{format}</example>"
        }
    }

    dummy_function_response = {'response': action_response, 'messageVersion': '1.0'}
    return dummy_function_response
