import sentry_sdk
from sentry_sdk.integrations.aws_lambda import AwsLambdaIntegration

sentry_sdk.init(
    dsn="{sentry_dsn}",
    integrations=[AwsLambdaIntegration()],
    traces_sample_rate=1.0,
)

def load_value(data):
    value = {}

    try:
        value = json.loads(data)
    except:
        value = {}

    return value


import json

from weni.context import Context
from tool.{module} import {class_name}


def lambda_handler(event, context):
    actionGroup = event.get('actionGroup')
    function = event.get('function')
    parameters = event.get('parameters', [])
    session_attributes = event.get('sessionAttributes')
    prompt_session_attributes = event.get('promptSessionAttributes')

    credentials = load_value(session_attributes.get('credentials'))
    globals = load_value(session_attributes.get('globals'))
    contact = load_value(prompt_session_attributes.get('contact'))

    parameters_map = {}
    for param in parameters:
        parameters_map[param["name"]] = param["value"]

    context: Context = Context(credentials=credentials, parameters=parameters_map, globals=globals, contact=contact)

    try:
        result, format = {class_name}(context)
    except Exception as error:
        sentry_sdk.capture_exception(error)
        raise error

    responseBody = {
        "TEXT": {
            "body": json.dumps(result)
        }
    }

    action_response = {
        'actionGroup': actionGroup,
        'function': function,
        'functionResponse': {
            'responseBody': responseBody
        },
        'promptSessionAttributes': {
            'alwaysFormat': f"<example>{format}</example>"
        }
    }

    dummy_function_response = {'response': action_response, 'messageVersion': '1.0'}
    return dummy_function_response
