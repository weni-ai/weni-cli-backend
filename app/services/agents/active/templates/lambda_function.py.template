import sentry_sdk
from sentry_sdk.integrations.aws_lambda import AwsLambdaIntegration

sentry_sdk.init(
    dsn="{sentry_dsn}",
    integrations=[AwsLambdaIntegration()],
    traces_sample_rate=1.0,
)


import json

from enum import Enum
from weni.rules import Rule
from weni.preprocessor import PreProcessor, ProcessedData
from weni.context import PreProcessorContext
from preprocessor.{preprocessor_module} import {preprocessor_class}
{official_rules_imports}


def select_template_official_rules(data, rules, classname_to_key_map, template_map, ignored_rules_keys):
    for rule in rules:
        if classname_to_key_map.get(rule.__class__.__name__, None) in ignored_rules_keys:
            continue

        if rule.execute(data=data):
            return template_map[rule.__class__.__name__], rule.get_template_variables(data=data)

    return None, None


def select_template_project_rules(data, rules):
    for rule in rules:
        rule_instance = rule["instance"]
        if rule_instance.execute(data=data):
            return rule.get("template"), rule_instance.get_template_variables(data=data)

    return None, None


def json_load_field(field, default_value):
    value = default_value
    try:
        value = json.loads(field)
    except:
        value = default_value
    
    return value


def get_rule_class(scope):
    import inspect
    for key, value in scope.items():
        if inspect.isclass(value) and value is not Rule and issubclass(value, Rule):
            return value


def initialize_rule(rule):
    exec(rule.get("source"))
    rule_class = get_rule_class(locals())
    return rule_class()

class ResponseStatus(Enum):
    RULE_MATCHED = 0
    RULE_NOT_MATCHED = 1
    PREPROCESSING_FAILED = 2
    CUSTOM_RULE_FAILED = 3
    OFFICIAL_RULE_FAILED = 4

class LambdaResponse:
    def __init__(self, status: ResponseStatus, template: str, template_variables: dict, contact_urn: str, error: dict = {}):
        self.status = status
        self.template = template
        self.template_variables = template_variables
        self.contact_urn = contact_urn
        self.error = error

    def to_dict(self):
        return {
            "status": self.status.value,
            "template": self.template,
            "template_variables": self.template_variables,
            "contact_urn": self.contact_urn,
            "error": self.error,
        }


def lambda_handler(event, context):
    payload = event.get("payload", {})
    params = event.get("params", {})
    credentials = event.get("credentials", {}) # TODO: Check this
    ignored_official_rules_keys = event.get("ignored_official_rules", [])
    project_rules = event.get("project_rules", [])
    project = event.get("project", {})

    # Rule class to template mapping
    rule_class_to_template_map = {rule_class_to_template}
    classname_to_key_map = {classname_to_key_map}

    context: Context = PreProcessorContext(credentials=credentials, params=params, payload=payload, project=project)

    # Apply preprocessing
    try:
        preprocess_result = {preprocessor_class}(context)
    except Exception as error:
        sentry_sdk.capture_exception(error)
        return LambdaResponse(
            status=ResponseStatus.PREPROCESSING_FAILED,
            template=None,
            template_variables={},
            contact_urn=None,
            error=str(error)
        ).to_dict()

    # Try our project rules
    try:
        for rule in project_rules:
            rule["instance"] = initialize_rule(rule)
    
        template, template_variables = select_template_project_rules(preprocess_result, project_rules)
    except Exception as error:
        sentry_sdk.capture_exception(error)
        return LambdaResponse(
            status=ResponseStatus.CUSTOM_RULE_FAILED,
            template=None,
            template_variables={},
            contact_urn=None,
            error=str(error)
        ).to_dict()

    # Project rules did not match, try our official rules
    try:
        if not template:
            official_rules = [{official_rules_instances}]
            template, template_variables = select_template_official_rules(
                preprocess_result,
                official_rules,
                classname_to_key_map,
                rule_class_to_template_map,
                ignored_official_rules_keys
            )
    except Exception as error:
        sentry_sdk.capture_exception(error)
        return LambdaResponse(
            status=ResponseStatus.OFFICIAL_RULE_FAILED,
            template=None,
            template_variables={},
            contact_urn=None,
            error=str(error)
        ).to_dict()

    if not template:
        return LambdaResponse(
            status=ResponseStatus.RULE_NOT_MATCHED,
            template=None,
            template_variables={},
            contact_urn=None,
            error={"message": "No template found"}
        ).to_dict()


    return LambdaResponse(
        status=ResponseStatus.RULE_MATCHED,
        template=template,
        template_variables=template_variables,
        contact_urn=preprocess_result.urn,
    ).to_dict()
